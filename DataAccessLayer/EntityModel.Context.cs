//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DataAccessLayer
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class LoanManagementEntities1 : DbContext
    {
        public LoanManagementEntities1()
            : base("name=LoanManagementEntities1")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Customer> Customers { get; set; }
        public virtual DbSet<LoanApplicant> LoanApplicants { get; set; }
        public virtual DbSet<SelectedApplicant> SelectedApplicants { get; set; }
    
        public virtual ObjectResult<AddToCustomers_Result> AddToCustomers(string name, string address, Nullable<int> age, string userName, string password)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var addressParameter = address != null ?
                new ObjectParameter("Address", address) :
                new ObjectParameter("Address", typeof(string));
    
            var ageParameter = age.HasValue ?
                new ObjectParameter("Age", age) :
                new ObjectParameter("Age", typeof(int));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<AddToCustomers_Result>("AddToCustomers", nameParameter, addressParameter, ageParameter, userNameParameter, passwordParameter);
        }
    
        public virtual ObjectResult<AddToLoanApplicants_Result> AddToLoanApplicants(string name, Nullable<int> age, Nullable<double> salary, string typeOfLoan, Nullable<int> duration, Nullable<double> amount, string userName)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var ageParameter = age.HasValue ?
                new ObjectParameter("Age", age) :
                new ObjectParameter("Age", typeof(int));
    
            var salaryParameter = salary.HasValue ?
                new ObjectParameter("Salary", salary) :
                new ObjectParameter("Salary", typeof(double));
    
            var typeOfLoanParameter = typeOfLoan != null ?
                new ObjectParameter("TypeOfLoan", typeOfLoan) :
                new ObjectParameter("TypeOfLoan", typeof(string));
    
            var durationParameter = duration.HasValue ?
                new ObjectParameter("Duration", duration) :
                new ObjectParameter("Duration", typeof(int));
    
            var amountParameter = amount.HasValue ?
                new ObjectParameter("Amount", amount) :
                new ObjectParameter("Amount", typeof(double));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<AddToLoanApplicants_Result>("AddToLoanApplicants", nameParameter, ageParameter, salaryParameter, typeOfLoanParameter, durationParameter, amountParameter, userNameParameter);
        }
    
        public virtual int AddToSelectedLoanApplicants(string username, Nullable<double> emiAmount)
        {
            var usernameParameter = username != null ?
                new ObjectParameter("username", username) :
                new ObjectParameter("username", typeof(string));
    
            var emiAmountParameter = emiAmount.HasValue ?
                new ObjectParameter("emiAmount", emiAmount) :
                new ObjectParameter("emiAmount", typeof(double));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddToSelectedLoanApplicants", usernameParameter, emiAmountParameter);
        }
    
        public virtual ObjectResult<ApplicantProcessApproved_Result> ApplicantProcessApproved(Nullable<int> applicantID, Nullable<double> interest, Nullable<double> emi, string typeofLoan, string applicantIDString)
        {
            var applicantIDParameter = applicantID.HasValue ?
                new ObjectParameter("applicantID", applicantID) :
                new ObjectParameter("applicantID", typeof(int));
    
            var interestParameter = interest.HasValue ?
                new ObjectParameter("interest", interest) :
                new ObjectParameter("interest", typeof(double));
    
            var emiParameter = emi.HasValue ?
                new ObjectParameter("emi", emi) :
                new ObjectParameter("emi", typeof(double));
    
            var typeofLoanParameter = typeofLoan != null ?
                new ObjectParameter("typeofLoan", typeofLoan) :
                new ObjectParameter("typeofLoan", typeof(string));
    
            var applicantIDStringParameter = applicantIDString != null ?
                new ObjectParameter("applicantIDString", applicantIDString) :
                new ObjectParameter("applicantIDString", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ApplicantProcessApproved_Result>("ApplicantProcessApproved", applicantIDParameter, interestParameter, emiParameter, typeofLoanParameter, applicantIDStringParameter);
        }
    
        public virtual ObjectResult<ApplicantProcessRejected_Result> ApplicantProcessRejected(Nullable<int> applicantID)
        {
            var applicantIDParameter = applicantID.HasValue ?
                new ObjectParameter("applicantID", applicantID) :
                new ObjectParameter("applicantID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ApplicantProcessRejected_Result>("ApplicantProcessRejected", applicantIDParameter);
        }
    
        public virtual ObjectResult<Nullable<double>> EMI(Nullable<double> principal, Nullable<double> interest, Nullable<double> year)
        {
            var principalParameter = principal.HasValue ?
                new ObjectParameter("principal", principal) :
                new ObjectParameter("principal", typeof(double));
    
            var interestParameter = interest.HasValue ?
                new ObjectParameter("interest", interest) :
                new ObjectParameter("interest", typeof(double));
    
            var yearParameter = year.HasValue ?
                new ObjectParameter("year", year) :
                new ObjectParameter("year", typeof(double));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<double>>("EMI", principalParameter, interestParameter, yearParameter);
        }
    
        public virtual ObjectResult<ProvideLoanStatus_Result> ProvideLoanStatus(string username)
        {
            var usernameParameter = username != null ?
                new ObjectParameter("username", username) :
                new ObjectParameter("username", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ProvideLoanStatus_Result>("ProvideLoanStatus", usernameParameter);
        }
    
        public virtual ObjectResult<PayEMI2_Result> PayEMI2(Nullable<int> applicantID, Nullable<double> interest, Nullable<double> emi, string typeofLoan, string applicantIDString)
        {
            var applicantIDParameter = applicantID.HasValue ?
                new ObjectParameter("applicantID", applicantID) :
                new ObjectParameter("applicantID", typeof(int));
    
            var interestParameter = interest.HasValue ?
                new ObjectParameter("interest", interest) :
                new ObjectParameter("interest", typeof(double));
    
            var emiParameter = emi.HasValue ?
                new ObjectParameter("emi", emi) :
                new ObjectParameter("emi", typeof(double));
    
            var typeofLoanParameter = typeofLoan != null ?
                new ObjectParameter("typeofLoan", typeofLoan) :
                new ObjectParameter("typeofLoan", typeof(string));
    
            var applicantIDStringParameter = applicantIDString != null ?
                new ObjectParameter("applicantIDString", applicantIDString) :
                new ObjectParameter("applicantIDString", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<PayEMI2_Result>("PayEMI2", applicantIDParameter, interestParameter, emiParameter, typeofLoanParameter, applicantIDStringParameter);
        }
    }
}
